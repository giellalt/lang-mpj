# cat fkvtext_analysed.txt | lookup2cg | vislcg3 -g disambiguation.cg3 -t
# echo 'sentence' | preprocess | lookup -flags mbTT 1.fst | lookup2cg|vislcg3 -g ../../syntax/1_disambiguation.cg3

#   ============================ #
#!! !!!Start making a syntactic disambiguator
#   ============================ #

#!! !!Sets

# ========== #
# Delimiters #
# ========== #


DELIMITERS = "<.>" "<...>" "<!>" "<?>" "<¶>" ;
#!! Sentence delimiters are the following: "<.>" "<...>" "<!>" "<?>" "<¶>"




# ============= #
# Tags and sets #
# ============= #


# ========
   SETS
# ========

LIST BOS = (>>>) (<s>) (sent);
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

#!! !Part-of-Speech
LIST N = N ;  #!! * N = noun
LIST A = A ;  #!! * A = adjective
LIST Num = Num ;  #!! * Num = numeral
LIST V = V ;  #!! * V = verb
LIST CC = CC ; #!! * CC = conjunction
LIST CS = CS ; #!! * CS = subjunction
LIST Adv = Adv ; #!! * Adv = adverb
LIST Pr = Pr ;  #!! * Pr = preposition
LIST Po = Po ;  #!! * Po = postposition
LIST Pron = Pron ; #!! * Pron = pronoun
LIST Interj = Interj ; #!! * Interj = interjection
LIST CLB = CLB ;
LIST CLBfinal = CLBfinal ; # because common num
LIST PUNCT = PUNCT ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Pst = Pst ;
LIST Act = Act ;
LIST Pass = Pass ;

LIST Attr = Attr ; # ?

#!! !Numerus
LIST Sg = Sg ;   #!! * Sg = Singular
LIST Pl = Pl ;   #!! * Pl = Plural
LIST Sg1 = Sg1 ;   #!! * Sg1 = Singular 1.p.
LIST Sg2 = Sg2 ;   #!! * Sg2 = Singular 2.p.
LIST Sg3 = Sg3 ;   #!! * Sg3 = Singular 3.p.
LIST Pl1 = Pl1 ;   #!! * Pl1 = Plural 1.p.
LIST Pl2 = Pl2 ;   #!! * Pl2 = Plural 2.p.
LIST Pl3 = Pl3 ;   #!! * Pl3 = Plural 3.p.
#!! !Cases
LIST Nom = Nom ; #!! * Nom
LIST Gen = Gen ;   #!! * Gen
LIST Acc = Acc ;   #!! * Acc
LIST Par = Par ;   #!! * Par
LIST Ine = Ine ;   #!! * Ine
LIST Ill = Ill ;   #!! * Ill
LIST Ela = Ela ;   #!! * Ela
LIST Ade = Ade ;   #!! * Ade
LIST Abe = Abe ;   #!! * Abe
LIST All = All ;   #!! * All
LIST Abl = Abl ;   #!! * Abl
LIST Ess = Ess ;   #!! * Ess
LIST Tra = Tra ;   #!! * Tra
LIST Ins = Ins ;   #!! * Ins
LIST Com = Com ;   #!! * Com
LIST Loc = Loc ;
LIST SUBJ-CASE = Nom Par ;   #!! * SUBJ-CASE = Nom Par

LIST CASE = Nom Gen Acc Par Ine Ill Ela Ade Abe All Abl Ess Tra Ins Com ;	
LIST Pos = Pos ;	
LIST Comp = Comp ;
LIST Superl = Superl ;	
LIST Ord = Ord ;

LIST Err/Orth = Err/Orth ;
	
#!! !Types
LIST Prop = Prop ;   #!! * Prop = Proper noun
LIST Interr = Interr ;   #!! * Interr = Interrogative
LIST Dem = Dem ; #!! * Dem = demonstrative pron
LIST Rel = Rel ;   #!! * Rel = Relative pron
LIST Relpronpl = (Pron Rel Pl) ; #!! Relpronpl "mikkä ja "jokka"
LIST Relpronsg = (Pron Rel Sg) ; #!! Relpronsg "mikä" ja "joka"
LIST Interrpronpl = (Pron Interr Pl) ; #!! Interrpronpl "kuka" ja "mikä"
LIST Pers = Pers ; #!! * Pers = Personal pron
LIST Indef = Indef ; #!! * Indef = Indef pron
LIST Qu = Qu ;

LIST Inf = Inf ; #!! * Inf = Infinitive
LIST ConNeg = ConNeg ; #!! * ConNeg = Conjugated as Negative form
LIST PrfPrc = PrfPrc ;  #!! * PrfPrc = Perfectum Particip
LIST Imprt = Imprt ; #!! * Imprt = Imperative
LIST Act = Act ; #!! * Act = Active
LIST Neg = Neg ; #!! * Neg = Negation verb


LIST PxSg1 = PxSg1 ;
LIST PxSg2 = PxSg2 ;
LIST PxSg3 = PxSg3 ;
LIST PxPl1 = PxPl1 ;
LIST PxPl2 = PxPl2 ;
LIST PxPl3 = PxPl3 ;

LIST PX = PxSg1  PxSg2  PxSg3  PxPl1  PxPl2  PxPl3 ;	
	
LIST COMMA = "," ; #!! * COMMA = comma
LIST Foc/han = Foc/han ;
LIST Foc/kaan = Foc/kaan ; #!! * Foc/kaan = focus clitic -kaan
LIST Sem/Fem = Sem/Fem ; #!! * Sem/Fem = feminin propernoun
LIST @CVP = @CVP ; # !! * @CVP = Conjunction or subjunction that conjoins finite verb phrases.
LIST @CNP = @CNP ; # !! * @CNP = Local conjunction or subjunction.

LIST Sem/ID = Sem/ID ;
LIST Arab = Arab ;

LIST CURRENCY = "dinaari" "dollari" "euro" "kruunu" "kr" "rupla" "rubel" "¢" "€" "$";
	

#!! !!Sets with more members
# ====

LIST WORD = N V A Adv Pr Interj Po Num CC CS Pron  ; #!! * WORD = all PoS

# Sets for barriers
LIST NPMOD = (Pers Gen) (A Gen) (A Ine) (A Ade) (A Nom) (A Par) (A Acc) ; #!! * NPMOD = these can modify a noun
SET NPMODADV = NPMOD OR Adv ; #!! * NPMODADV = NPMOD plus adverb

SET NOT-NPMOD = WORD - NPMOD ; #!! * NOT-NPMOD = these cannot modify a noun

SET NOT-NPMODADV = WORD - NPMODADV ; #!! * NOT-NPMODADV = these cannot modify a noun, and is not adverb

LIST QVANT-ADV = "paljon" "vähän" "enämen" "vähemän" ;  #!! * QVANT-ADV = e.g. paljon, vähän
LIST KUNKA = "kunka" "missä" ;  #!! * KUNKA = e.g. kunka missä (adverbs that start a sentence)


SET S-BOUNDARY = CS OR ("mutta") OR (":") OR Rel OR @CVP OR KUNKA ;  #!! * S-BOUNDARY = words that start a sentence

LIST VFIN = Ind Cond Pot Imprt   ;  #!! * VFIN = finite verb

LIST COPULAS = "olla" ;  #!! * COPULAS = olla

LIST MOD-ASP =  "saađa" "häyttyyt"   ; #add lemmas  #!! * MOD-ASP = auxilaries

LIST AUX-OR-MAIN = "tulla" "osata" "haluta"  ; #add lemmas  #!! * AUX-OR-MAIN = verbs which can be both auxilary and mainverb

SET AUX = COPULAS OR MOD-ASP OR AUX-OR-MAIN ;  #!! * AUX = verbs which can be auxilary

SET SV-BOUNDARY = S-BOUNDARY OR VFIN   ;  #!! * SV-BOUNDARY = words that start a sentence and finite verb

LIST ELA-VERB = "herättäät" "pittäät" ;


LIST @SUBJ = @SUBJ @<SUBJ @SUBJ> ;
LIST @NEC-S = @NEC-S ;
LIST @NF-S = @NF-S ;
LIST @OBJ = @OBJ ;
LIST @PC = @PC ;
LIST @<P = @<P ;
LIST @P> = @P> ;

LIST @NUM< = @NUM< ;
LIST @>NUM = @>NUM ;

# Syntactic tags from sme
# These should be used, for tag harmonisation.

LIST @+FAUXV = @+FAUXV ;
LIST @+FMAINV = @+FMAINV ;
LIST @-FAUXV = @-FAUXV ;
 
LIST @-FMAINV = @-FMAINV ;
LIST @-FSUBJ> = @-FSUBJ> ;
LIST @-F<OBJ = @-F<OBJ ;
LIST @-FOBJ> = @-FOBJ> ;
LIST @SPRED<OBJ = @SPRED<OBJ ;
LIST @-FADVL = @-FADVL ;

SET FOBJ = @-F<OBJ OR @-FOBJ> ; 
SET FMAINV = @-FMAINV OR @+FMAINV ;
SET FAUXV = @-FAUXV OR @+FAUXV ;

LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-FADVL ;
LIST @>ADVL = @>ADVL ;
LIST @ADVL< = @ADVL< ;
LIST @<ADVL = @<ADVL ;
LIST @ADVL> = @ADVL> ;

LIST @HAB = @HAB ;
 
LIST @>N = @>N ;

LIST @N< = @N< ;
 

LIST @>A = @>A ;

LIST @P< = @P< ;

LIST @>P = @>P ;

LIST @HNOUN = @HNOUN ;
LIST @INTERJ = @INTERJ ;
 
LIST @>Num = @>Num;

LIST @Pron< = @Pron< ;
LIST @>Pron = @>Pron ;

LIST @Num< = @Num< ;

LIST @<OBJ = @<OBJ ;
LIST @OBJ> = @OBJ> ;
LIST @OPRED = @OPRED ;
LIST @<OPRED = @<OPRED ;
LIST @OPRED> = @OPRED> ;
LIST @PCLE = @PCLE ;
LIST @COMP-CS< = @COMP-CS< ;
 
LIST @SPRED = @SPRED ;
LIST @<SPRED = @<SPRED ;
LIST @SPRED> = @SPRED> ;
#LIST @SUBJ = @SUBJ ;
LIST @<SUBJ = @<SUBJ ;
LIST @SUBJ> = @SUBJ> ;
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;

LIST @PPRED = @PPRED ;
 
LIST @APP = @APP ;
LIST @APP-N< = @APP-N< ;
LIST @APP-Pron< = @APP-Pron< ;
LIST @APP>Pron = @APP>Pron ;
LIST @APP-Num< = @APP-Num< ;
LIST @APP-ADVL< = @APP-ADVL< ;
LIST @VOC = @VOC ;

LIST @CVP = @CVP ;
LIST @CNP = @CNP ;

SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
LIST <OBJ = @-F<OBJ @<OBJ ;
LIST OBJ> = @OBJ> @-FOBJ> ;


LIST @FOC = @FOC ;

LIST @X = @X ;
 

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-FADVL)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@HAB) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC) (@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X);

LIST SYNT = @+FMAINV @+FAUXV @-FMAINV @-FAUXV @<SPRED @SPRED> @SUBJ @<SUBJ @SUBJ> @OBJ @<OBJ @OBJ> @NEC-S @NF-S @OBJ @PC @<P @P> @>P @N> @>N @N<  @<N @<NUM @NUM< @ADVL @<ADVL @LOC @PCLE @HAB @CVP @CNP @CNB @NES @X ;


# Here come the rules

BEFORE-SECTIONS

REMOVE CLBfinal ;

SELECT:Sem/ID Sem/ID IF (-1 ("§")) ; 
REMOVE:Sem/ID Sem/ID IF (1 CURRENCY) ; 

SELECT:Arab Arab IF (NOT 0 Ord OR Prop OR Arab + Err/Orth) ; # In Apertium we get analysis both with and without the tag.


REMOVE:dyn  Arab (0 Prop) ; # foreløpig løsning, til vi har ny løsning for numerals.lexc
	


SECTION

SELECT Pst  (-1 N);

MAP:foc @FOC TARGET N (-1 BOS);

MAP:fmv @+FMAINV TARGET Pst ;

MAP:advl @<ADVL TARGET Loc IF (-1 V);



